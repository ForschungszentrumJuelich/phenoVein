// Copyright (c) 2015, Forschungszentrum Jülich GmbH
// All rights reserved.
// Contributors: Jonas Bühler, Daniel Pflugfelder, Siegfried Jahnke
// Address: Institute of Bio- and Geosciences, Plant Sciences (IBG-2), Forschungszentrum Jülich GmbH, 52428 Jülich, Germany
// 
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this
//     list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//  3. Neither the name of the copyright holder nor the names of its contributors
//     may be used to endorse or promote products derived from this software without
//     specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
// OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
// OF THE POSSIBILITY OF SUCH DAMAGE.


Interface  {
  Inputs  {
    Field input0 {
      internalName = MinMaxScan0.input0
      comment      = "Skeleton Image"
    }
    Field input1 {
      internalName = MinMaxScan1.input0
      comment = "Original Color Image"
    }
    Field input2 {
      internalName = MinMaxScan2.input0
      comment      = "Filtered Image"
    }
  }
  Outputs  {
    Field output0 {
      internalName = ImagePropertyConvert2.output0
      comment = "Corrected Skeleton Image"
    }
    Field outXMarkerList {
      internalName = SoView2DMarkerEditor.outXMarkerList
    }
  }
  Parameters {       
    Field updateInputs                 {type = Trigger}

    Field removeCSOFilename            {internalName = SaveRemoveCSO.fileName    }
    Field removeMarkerFilename         {internalName = SaveRemoveMarker.filename }
    Field addCSOFilename               {internalName = SaveAddCSO.fileName       }

    Field useLiveWire                  {internalName = AddProcessorSwitch.currentInput}
    FIeld costImage                    {internalName = CostImage.currentInput}
    Field creationMode                 {internalName = CSOFreehandProcessor1.creationMode}
    Field removeAllAddedVeins          {internalName = CSOManager.removeAllCSOsAndGroups }
    
    Field clearAllVeins                {internalName = clearAllVeins.currentInput}
    Field deleteRemoveMarker           {internalName = SoView2DMarkerEditor.deleteAll}
    Field deleteRemoveAreas            {internalName = CSOManager1.removeAllCSOsAndGroups}
    
    Field calcSkelEndPoints            { type = Trigger}
    Field numberSkelEndPoints          { internalName = SkeletonEndPoints.numberEndPoints}
    Field calcSkelBranchingPoints      { type = Trigger}
    Field numberSkelBranchingPoints    { internalName = SkeletonBranchingPoints.numberBranchingPoints}
    Field calcSkelLength               { type = Trigger}
    Field skelLength                   { internalName = SkeletonTotalLength.totalSkeletonLength}

    Field resetLUT                     {internalName = View2D.resetLUT}
    Field resetViewer                  {internalName = View2D.unzoom}

    Field transparencyActiveSkel       {internalName = SoView2DOverlay1.alphaFactor}
    Field transparencyDeleteSkel       {internalName = SoView2DOverlay3.alphaFactor}

    Field outFilename                  {type = String}
    Field saveManualCorrections        {type = Trigger}
    Field loadManualCorrections        {type = Trigger}
  }
}


Commands {
  source = $(LOCAL)/phenoVein_ManualCorrection.py

  FieldListener updateInputs {command = updateInputs}
  FieldListener saveManualCorrections {command = saveManualCorrections}
  FieldListener loadManualCorrections {command = loadManualCorrections}

  FieldListener calcSkelEndPoints       { command = calcSkelEndPoints }
  FieldListener calcSkelBranchingPoints { command = calcSkelBranchingPoints }
  FieldListener calcSkelLength          { command = calcSkelLength }
}