// Copyright (c) 2015, Forschungszentrum Jülich GmbH
// All rights reserved.
// Contributors: Jonas Bühler, Daniel Pflugfelder, Siegfried Jahnke
// Address: Institute of Bio- and Geosciences, Plant Sciences (IBG-2), Forschungszentrum Jülich GmbH, 52428 Jülich, Germany
// 
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//  1. Redistributions of source code must retain the above copyright notice, this
//     list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//  3. Neither the name of the copyright holder nor the names of its contributors
//     may be used to endorse or promote products derived from this software without
//     specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
// OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
// OF THE POSSIBILITY OF SUCH DAMAGE.


Interface  {
  Inputs  {
    Field input0 {
      internalName = InputImage.input1
    }
  }
  Outputs  {
    Field output0 {
      internalName = ImagePropertyConvert_setVoxelSize_1.output0
      comment = "Cropped and b&w input image"
    }
    Field output1 {
      internalName = ImagePropertyConvert_setVoxelSize_2.output0
      comment = "cropped original input image"
    }
  }
  Parameters {
    Field imageFilename           { internalName = ImageLoad.filename}
    Field imageLoadStatus         { internalName = ImageLoad.status}
    Field vectorLengthMM          { internalName = PixelSizeFromVector.arg1X}
    Field scalingVector           { internalName = ScalingVector.listString}
    Field colorChannel            { internalName = ColorChannel.currentInput}
//    Field pixelSizeXY             {internalName = ImagePropertyConvert.voxelSizeX } // original version
    Field pixelSizeXY             { type = Double } // original version
    Field getPixelSizeFromVector  { type = Trigger}
    Field getPixelSizeFromImage   { type = Trigger}
    Field selectRegionOfInterest  { internalName = SelectRegionOfInterest.currentInput min = 0 max = 1 type = Bool }
    Field startWorldPos           { internalName = rect.startWorldPos}
    Field endWorldPos             { internalName = rect.endWorldPos}
    Field invertImage             { internalName = InvertImage.currentInput min = 0 max = 1 type = Bool }
    Field resetLUT                { internalName = View2D.resetLUT}
    Field resetViewer             { internalName = View2D.unzoom}
  }
}


Commands {
  source = "$(LOCAL)/phenoVein_LoadImage.py"
  initCommand = setPixelSizeManually
  
  FieldListener getPixelSizeFromVector {command = getPixelSizeFromVector}
  FieldListener getPixelSizeFromImage  {command = getPixelSizeFromImage}
  FieldListener pixelSizeXY            {command = setPixelSizeManually}
}